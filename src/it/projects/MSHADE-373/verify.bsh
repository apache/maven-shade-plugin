/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import java.io.*;
import java.util.jar.*;

// NOTE: We deliberately use JarInputStream and not JarFile here!
Manifest extractManifest(name) {
    file = new File( basedir, "target/" + name );
    if ( !file.exists() )
    {
        throw new IllegalStateException( "No file '" + file + "'" );
    }
    JarInputStream jarStream = new JarInputStream( new FileInputStream( file ) );
    Manifest mf = jarStream.getManifest();
    jarStream.close();
    return mf;
}

void assertsEntries( name, expectedTestEntry, expectedOriginalEntry, expectedCustomEntry, shouldHaveArchiverVersion ) {
    attributes = extractManifest( name ).getMainAttributes();

    if ( !Objects.equals( expectedTestEntry, attributes.getValue( "Test-Entry" ) ) )
    {
        throw new IllegalStateException( "Test-Entry should have been '" + expectedTestEntry + "' in " + name + ": " + attributes.entrySet() );
    }

    if ( !Objects.equals( expectedOriginalEntry, attributes.getValue( "Original-Entry" ) ) )
    {
        throw new IllegalStateException( "Original-Entry should have been '" + expectedOriginalEntry + "' in " + name + ": " + attributes.entrySet() );
    }

    if ( !Objects.equals( expectedCustomEntry, attributes.getValue( "Custom-Entry" ) ) )
    {
        throw new IllegalStateException( "Custom-Entry should have been '" + expectedCustomEntry + "' in " + name + ": " + attributes.entrySet() );
    }

    if ( shouldHaveArchiverVersion && attributes.getValue( "Archiver-Version" ) == null ||
        !shouldHaveArchiverVersion && attributes.getValue( "Archiver-Version" ) != null )
    {
        throw new IllegalStateException( "META-INF/MANIFEST.mf Archiver-Version entry is invalid in " + name + ": " + attributes.entrySet() );
    }
}

assertsEntries( "test-1.0.jar", "PASSED", "PASSED", "SET", true );
assertsEntries( "test-1.0-sources.jar", "FAILED", null, null, false ); // specific config
assertsEntries( "test-1.0-tests.jar", "PASSED", "PASSED", "SET", true ); // inherits from the default transformer

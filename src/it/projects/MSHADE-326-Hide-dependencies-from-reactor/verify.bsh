/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import java.io.*;
import java.util.jar.*;
import java.util.Arrays;
import org.codehaus.plexus.util.*;

String[] libraryWanted =
{
    "nl/example/StringTester.class",
    "nl/example/shaded/org/codehaus/plexus/util/StringUtils.class",
};

String[] libraryUnwanted =
{
    "org/codehaus/plexus/util/StringUtils.class",
};

JarFile libraryJarFile = null;
try
{
    libraryJarFile = new JarFile( new File( basedir, "library/target/library-1.0.jar" ) );

    for ( String path : libraryWanted )
    {
        if ( libraryJarFile.getEntry( path ) == null )
        {
            throw new IllegalStateException( "Library: wanted path is missing: " + path );
        }
    }

    for ( String path : libraryUnwanted )
    {
        if ( libraryJarFile.getEntry( path ) != null )
        {
            throw new IllegalStateException( "Library: unwanted path is present: " + path );
        }
    }

    JarEntry jarEntry = libraryJarFile.getEntry( "META-INF/maven/org.apache.maven.its.shade.drp/library/pom.xml" );
    String pomFile = IOUtil.toString( libraryJarFile.getInputStream( jarEntry ), "UTF-8" );

    if ( pomFile.contains( "<groupId>org.codehaus.plexus</groupId>" ) ) {
        throw new IllegalStateException( "The pom.xml still contains a reference to the org.codehaus.plexus dependency");
    }
}
finally
{
    if ( libraryJarFile != null ) {
        libraryJarFile.close();
    }
}


// =====================

String[] commandlineWanted =
{
    "nl/example/Main.class",
    "nl/example/StringTester.class",
    "nl/example/shaded/org/codehaus/plexus/util/StringUtils.class",
};

String[] commandlineUnwanted =
{
    "org/codehaus/plexus/util/Base64.class",
    "org/codehaus/plexus/util/StringUtils.class",
};

JarFile commandlineJarFile = null;
try
{
    commandlineJarFile = new JarFile( new File( basedir, "commandline/target/commandline-1.0.jar" ) );

    for ( String path : commandlineWanted )
    {
        if ( commandlineJarFile.getEntry( path ) == null )
        {
            throw new IllegalStateException( "Commandline: wanted path is missing: " + path );
        }
    }

    for ( String path : commandlineUnwanted )
    {
        if ( commandlineJarFile.getEntry( path ) != null )
        {
            throw new IllegalStateException( "Commandline: unwanted path is present: " + path );
        }
    }
}
finally
{
    if ( commandlineJarFile != null ) {
        commandlineJarFile.close();
    }
}
